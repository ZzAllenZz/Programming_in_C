Structure Property
2 structure are created.
1. Program
(1)count:total tokens read in
(2)cw: current word to index token in recursion
(3)array:used to store tokens
(4)map: used to store VAR
(5)lt:a structure nested in Program
2.List
This structure is used to record the Programs and how many of these
(1)prog: an array of pointer that points to Program
(2)size: used to record how many Programs.
Why we need List:
1. we need this structure mainly because when we abort the whole programe,
we need to free all allocated location. However, if we abort the whole program in a sub-file,
we need to track the Programes previously created to make no memory leaks.
(e.g. interpret "test1.nal" firstly, and then in "test1.nal", we execute FILE "test2.nal" ,
and then in "test2.nal", we execute FILE "test3.nal", and then in "test3.nal", we execute ABORT.
In this case, before we interpret ABORT by exit(0), we need to free all the allocated memories.
In order to track program1, program2, program3 to separately free them,
we need to use this nested structure, named List.
In other words, this nested structure is similar to create a global variable, aka,Programs.



ERROR_1 is a kind of error that cannot or need not to report the information about Program
e.g. Failed to allocate memory, cannot open a file...
ERROR_2 is a kind of error that can track the information about Program
e.g. Expect a closing # to finish STRCON...


.testf is just used for test function.










IN2STR INNUM
in interpreter,
1.used getchar() to get input to allow dynamic allocation
2.all of them are store in map as str. But INNUM will be checked whether input is a number.
3.
JUMP
1.in parser, as long as it followed be a NUMCON, it will be parsed ok
2.in interpreter, it must be an integer and smaller than p->count

PRINT or PRINTN
1.in parser, as long as it followed be a VARCON, it will be parsed ok;
do not think about whether the var is declared;
2.in interpreter, if it is a var, it must be defined before print;

SET
in parser, as long as it is a VARCON

in interpreter,
the type must be matched.
in other words, STRVAR = STRVAR || STRVAR = STRCON ||NUMVAR = NUMVAR||NUMVAR = NUMCON
And also, if R-value is var, it must be declared before used.


RPNOPE
%An arithmetic operation in reverse polish notion
% RPNOPE %A = { %B 12.35 + %C / }
% which means %A = (%B+12.35)/%C in Infix notion
%<RPNOPE>:="RPNOPE" NUMVAR "=" "{" NUMVAR|NUMCON|"+"|"-"|"*"|"/" "}"


心得
1.linux下和windows下的文本编辑 \n \t \r
2.abort
3.读文件时候的处理，fsanf to getc
4.varcon has dynamic size
5.分步解决， like FSM
6.不用返回值的原因，报错不方便，不知道具体哪种错误 “#